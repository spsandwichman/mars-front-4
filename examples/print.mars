module print;

import os "./os";

/*

    format specifiers:
    %bool - true or false
    %int, %i64, %i32, %i16, %i8 - signed integer
    %uint, %u64, %u32, %u16, %u8 - signed integer

    %v - value, try to derive format
*/

def FormatKind = enum u8 {
    INVALID = 0,
    BOOL,
    INT, I64, I32, I16, I8,
    UINT, U64, U32, U16, U8,

    MAX
};

let format_kind_strs = [_][]let u8 .{
    [BOOL] = "bool",
    [INT]  = "int",
    [I64]  = "i64",
    [I32]  = "i32",
    [I16]  = "i16",
    [I8]   = "i8",
    [UINT] = "uint",
    [U64]  = "u64",
    [U32]  = "u32",
    [U16]  = "u16",
    [U8]   = "u8",
};


fn starts_with(start: []let u8, str: []let u8) -> bool {
    if start.len > str.len do return false;
    for let i in 0..<start.len {
        if start[i] != str[i] do return false;
    }
    return true;
}

fn categorize_specifier(fmt: []let u8) -> (kind: FormatKind, advance: int) {
    for mut i in (FormatKind.INVALID + 1) ..< FormatKind.MAX {
        let spec = format_kind_strs[i];
        if starts_with(spec, fmt) {
            return i, spec.len;
        }
    }
    return .INVALID, 1;
}

fn printf(format: []let u8, args: []let dyn) {
    mut fmt = format;
    mut current_arg = 0;
    mut seen_percent = false;

    for mut i in 0..<fmt.len {
        if fmt[i] == '%' {
            seen_percent = !seen_percent;
            continue;
        }

        if (!seen_percent) do continue;
    }
}