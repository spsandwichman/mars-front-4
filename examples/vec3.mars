module examples;

def Vec3 = struct {
    x, y, z: float,
};

fn vec3_neg(a: Vec3) -> Vec3 {
    return .{
        -a.x,
        -a.y,
        -a.z,
    };
}

fn vec3_add(a, b: Vec3) -> Vec3 {
    return .{
        a.x + b.x,
        a.y + b.y,
        a.z + b.z,
    };
}

fn vec3_inv(a: Vec3) -> Vec3 {
    return .{
        1 / a.x,
        1 / a.y,
        1 / a.z,
    };
}

fn vec3_sum_all(vecs: []let Vec3) -> Vec3 {
    mut sum: Vec3;
    for i in 0..<vecs.len {
        sum.x += vecs[i].x;
        sum.y += vecs[i].y;
        sum.z += vecs[i].z;
    }
    return sum;
}